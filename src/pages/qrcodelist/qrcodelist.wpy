<style lang="less">
  @import "../../less/mixin";

  page {
    //background-color: #d3e1fe;
    padding: 10rpx 10rpx 102rpx;
  }

  .query-form {
    .flex();
    margin-bottom: 10rpx;
    padding: 16rpx;
    background-color: #fff;
    border-radius: 8rpx;

    .query-item {
      .flex-v-center();
      &:not(:last-child) {
        margin-bottom: 10rpx;
      }
    }

    .query-label {
      width: 120rpx;
      text-align: center;
    }

    .form-item {
      margin-bottom: 0;
      flex: 1;
    }

  }

  .query-form-main {
    flex: 1;
    margin-right: 20rpx;
  }

  .query-form-aside {
    .flex();
    flex-direction: column;
  }

  .qrcode-table {
    .flex();
    flex: 1;
    flex-direction: column;
    border-radius: 8rpx;
    overflow: hidden;

    .table-body {
      flex: 1;
      height: 100%;
      overflow: hidden;
    }
  }

  .table-row {
    &:active {
      background-color: #f2f2f2;
    }
  }

  .table-cell.opt {
    flex:none;
    width:80rpx;

    .icon {
      padding: 0;
    }
  }

  .table-cell.status {
    flex:none;
    width:150rpx;
  }

</style>
<template>
  <view class="query-form">
    <view class="query-form-main">
      <view class="query-item">
        <veiw class="query-label">时间</veiw>
        <datetimepicker :value.sync="date" fields="month" @datetimechange.user="datetimechange"></datetimepicker>
      </view>
      <view class="query-item">
        <veiw class="query-label">状态</veiw>
        <statuspicker :items="statusArray" :selectIndex.sync="statusIndex" @pickerchange.user="pickerChange"></statuspicker>
      </view>
    </view>
    <view class="query-form-aside">
      <querybutton style="flex: 1;" @tap.user="queryTap">查询</querybutton>
    </view>
  </view>

  <view class="table qrcode-table">
    <view class="table-row table-header">
      <view class="table-cell th order">序号</view>
      <view class="table-cell th">二维码</view>
      <view class="table-cell th status">状态</view>
      <view class="table-cell th opt"></view>
    </view>
    <scroll-view scroll-y="true" class="table-body" lower-threshold="0" bindscrolltolower="onEndReached">
      <block wx:for="{{dataList}}" wx:key="index">
        <view class="table-row" @tap="tablerowTap({{item}})">
          <view class="table-cell td order">{{index + 1}}</view>
          <view class="table-cell td">{{item.qrcode}}</view>
          <view class="table-cell td status">{{item.statusText}}</view>
          <view class="table-cell td opt">
            <view class="icon-delete" wx:if="{{item.status!='checkPass'}}" @tap.stop="delTap({{item}})">
              <deleteIcon name="delete.svg"></deleteIcon>
            </view>
          </view>
        </view>
      </block>
    </scroll-view>
  </view>

  <tabbar :tabBar="tabBar" disabled="true" tabIndex="1" @tabbarChange.user="tabbarChange"></tabbar>

</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import Button from '../../components/button'
  import Icon from '../../components/icon'
  import Picker from '../../components/picker'
  import Datetimepicker from '../../components/datetimepicker'
  import Tabbar from '../../components/tabbar'
  import {showError, showToast, formatDate, confirm} from '../../utils/util'

  const STATUS_ARRAY = [
    {
      value: '',
      name: '全部'
    },
    {
      value: 'checking',
      name: '待审核'
    },
    {
      value: 'checkFail',
      name: '审核未通过'
    },
    {
      value: 'checkPass',
      name: '审核通过'
    },
    {
      value: 'scaning',
      name: '识别中'
    },
    {
      value: 'scanFail',
      name: '无法识别'
    }
  ]

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '二维码照片上报销量'
    }

    components = {
      querybutton: Button,
      deleteIcon: Icon,
      statuspicker: Picker,
      datetimepicker: Datetimepicker,
      tabbar: Tabbar
    }

    page = 1
    loaded = false

    data = {
      dataList: [],
      date: formatDate(new Date(), 'yyyy-MM'),
      status: '',
      statusArray: STATUS_ARRAY,
      statusIndex: 0,
      tabBar: {
        color: '#777',
        selectedColor: '#01458e',
        borderStyle: '#ddd',
        backgroundColor: '#fff',
        list: [
          {
            text: '统计',
            icon: 'stats.png',
            selectedIcon: 'stats-selected.png'
          },
          {
            text: '列表',
            icon: 'list.svg',
            selectedIcon: 'list-selected.png'
          }
        ]
      }
    }

    computed = {

    }

    watch = {
      status (value) {
        let index = 0
        this.statusArray.forEach((item, i) => {
          if (item.value === value) {
            index = i
          }
        })
        this.statusIndex = index
      }
    }

    methods = {
      queryTap (e) {
        this.handleQuery()
      },
      datetimechange (e) {
        this.date = e.detail.value
      },
      pickerChange (item) {
        this.status = item.value
      },
      tabbarChange (index) {
        if (index === 0) {
          this.$back()
        }
      },
      tablerowTap (params) {
        this.$navigate('/pages/qrcodedetail/qrcodedetail', {qrimageId: params.id})
      },
      delTap (item) {
        confirm('确定要删除吗?').then(() => {
          this.deleteImage(item.id)
        })
      }
    }

    handleQuery () {
      this.page = 1
      this.dataList = []
      this.queryList(this.date, this.status, this.page)
    }

    appendQuery () {
      if (!this.loaded) return
      this.queryList(this.date, this.status, ++this.page)
    }

    queryList(date = '', status = '', page) {
      let params = {
        date: date.replace(/\-/g, ''),
        status,
        page,
        limit: 20
      }
      this.loaded = false
      return new Promise((resolve, reject) => {
        fetch.get('find/qrimage', params).then(res => {
          if (res.success) {
            (res.data.docs || []).forEach(item => {
              item.statusText = this.statusArray.find(e => e.value === item.status).name
              this.dataList.push(item)
            })
            resolve(res.data)
            this.$apply()
          } else {
            reject(res.message)
            showError(res.message)
          }
        }, errMsg => {
          reject(errMsg)
          showError(errMsg)
        })
      }).finally(res => {
        this.loaded = true
      })
    }

    deleteImage (qrimageId) {
      fetch.get(`remove/qrimage/${qrimageId}`).then(res => {
        if (res.success) {
          showToast(res.message)
          this.handleQuery()
        } else {
          showError(res.message)
        }
      }, showError)
    }

    onEndReached () {
      this.appendQuery()
    }

    onLoad (params) {
      if (params.status) {
        this.status = params.status
      }
      this.handleQuery()
    }
  }
</script>
