<style lang="less">
  @import "../../less/mixin";

  page{
    background-color: #fff;
  }

  .query-form-wrap {
    margin: 30rpx;
    .flex();

    .query-form {
      flex: 1;
      margin-right: 20rpx;
    }
  }

  .query-form {
    position: relative;
    .flex-v-center();

    .form-item {
      margin-bottom: 0;
      flex: 1;
    }

    .clear-icon {
      position: absolute;
      right: 0;
      top: 50%;
      transform: translateY(-50%);
      z-index: 20;
    }

  }

  .table-row {
    &:active {
      background-color: rgba(0,0,0,.12);
    }
  }

  .table-cell {
    word-break: break-all;
    word-wrap: break-word;
    white-space:normal;
    padding-left: 4rpx;
    padding-right: 4rpx;
    &.opt {
      flex: none;
      width: 60rpx;
    }

    &.num {
      flex: none;
      width: 90rpx;
    }

    &.type {
      flex: none;
      width: 120rpx;
    }

    &.status {
      flex: none;
      width: 120rpx;
    }

    .icon {
      padding: 0;
    }
  }

</style>
<template>
  <view class="query-form-wrap">
    <view class="query-form">
      <queryinput placeholder="搜索二维码" border="true" icon="find-g.svg" :value.sync="receiptNo" @input.user="queryChange"></queryinput>
      <clearIcon name="clear.svg" className="clear-icon" @tap.user="clearTap"></clearIcon>
    </view>
    <querybutton @tap.user="queryTap">查询</querybutton>
  </view>

  <view class="table">
    <view class="table-row table-header">
      <view class="table-cell th order">序号</view>
      <view class="table-cell th">单据编号</view>
      <view class="table-cell th type">单据类型</view>
      <view class="table-cell th num">明细数</view>
      <view class="table-cell th status">单据状态</view>
      <view class="table-cell th opt"></view>
    </view>

    <scroll-view scroll-y="true" class="table-body" lower-threshold="0" style="height:{{tableHeight}}px;" bindscrolltolower="onEndReached">
      <block wx:for="{{dataList}}" wx:key="index">
        <view class="table-row" @tap="rowTap({{item}})">
          <view class="table-cell td order">{{index+1}}</view>
          <view class="table-cell td">{{item.receiptNo}}</view>
          <view class="table-cell td type">{{item.type}}</view>
          <view class="table-cell td num">{{item.count}}</view>
          <view class="table-cell td status">{{item.statusText}}</view>
          <view class="table-cell td opt">
            <view @tap.stop="delTap({{item}})" wx:if="{{item.status === 'unSubmit'}}">
              <deleteIcon name="delete.svg"></deleteIcon>
            </view>
          </view>
        </view>
      </block>
    </scroll-view>

  </view>

  <tabbar :tabBar="tabBar" disabled="true" tabIndex="1" @tabbarChange.user="tabbarChange"></tabbar>

</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import Formitem from '../../components/formitem'
  import Button from '../../components/button'
  import Icon from '../../components/icon'
  import Tabbar from '../../components/tabbar'
  import {showError, showToast, confirm} from '../../utils/util'

  const STATUS_MAP = {
    'unSubmit': '未提交',
    'submit' : '已提交'
  }

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '单据列表'
    }

    components = {
      queryinput: Formitem,
      clearIcon: Icon,
      deleteIcon: Icon,
      tabbar: Tabbar,
      querybutton: Button
    }

    page = 1
    loaded = false

    data = {
      dataList: [],
      total: 0,
      receiptNo: '',
      tableHeight: wx.getSystemInfoSync().windowHeight - 180,
      tabBar: {
        color: '#777',
        selectedColor: '#01458e',
        borderStyle: '#ddd',
        backgroundColor: '#fff',
        list: [
          {
            text: '新建',
            icon: 'create.svg',
            selectedIcon: 'create-selected.png'
          },
          {
            text: '列表',
            icon: 'list.svg',
            selectedIcon: 'list-selected.png'
          }
        ]
      }
    }

    computed = {

    }

    methods = {
      queryTap (e) {
        this.handleQuery()
      },
      clearTap (e) {
        this.receiptNo = ''
      },
      queryChange (e) {
        this.receiptNo = e.detail.value
      },
      tabbarChange (index) {
        if (index === 0) {
          this.$back()
        }
      },
      delTap (e) {
        let item = e.currentTarget.dataset.wepyParamsA
        confirm('确定要删除吗?').then(() => {
          this.deleteReceipt(item.id)
        })
      },
      rowTap (e) {
        let item = e.currentTarget.dataset.wepyParamsA
        this.getPrevPage().showReceipt(item.id)
        this.$back()
      }
    }

    handleQuery () {
      this.page = 1
      this.dataList = []
      this.queryReceipt(this.receiptNo, this.page)
    }

    appendQuery () {
      if(!this.loaded) return
      this.queryReceipt(this.receiptNo, ++this.page)
    }

    queryReceipt(receiptNo, page) {
      let params = {
        receiptNo: receiptNo,
        page: page
      }
      this.loaded = false
      return new Promise((resolve, reject) => {
        fetch.get('find/receipt', params).then(res => {
          if (res.success) {
            this.total = res.data.total
            res.data.docs.forEach(item => {
              item.statusText = STATUS_MAP[item.status]
            })
            Array.prototype.push.apply(this.dataList, res.data.docs)
            resolve(res.data)
            this.$apply()
          } else {
            reject(res.message)
            showError(res.message)
          }
        }, errMsg => {
          reject(errMsg)
          showError(errMsg)
        }).finally(res => {
          this.loaded = true
        })
      })
    }

    deleteReceipt (receiptId) {
      fetch.get(`remove/receipt/${receiptId}`).then(res => {
        if (res.success) {
          showToast(res.message)
          this.handleQuery()
        } else {
          showError(res.message)
        }
      }, errMsg => {
        showError(errMsg)
      })
    }

    getPrevPage () {
      const pages = this.getCurrentPages()
      return pages[pages.length - 2]
    }

    onEndReached () {
      this.appendQuery()
    }

    onLoad () {
      this.handleQuery()
      this.getPrevPage().reset()
    }
  }
</script>
