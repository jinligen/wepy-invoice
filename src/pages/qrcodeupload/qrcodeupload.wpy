<style lang="less">
  @import "../../less/mixin";

  page {
    display: block;
    height: auto;
  }

  .index-main {
    position: relative;
    padding: 0 10rpx;
    /*flex: 1;
    overflow: hidden;*/
  }

  .top-main{
    display: flex;
    background-color: #fff;
    /*border-radius: 8rpx;*/
    margin-bottom: 10rpx;
    padding: 30rpx;
  }

  .circle-pie-wrap{
    display: flex;
    flex: 1;
    justify-content: center;
    align-items: center;
  }

  .circle-pie{
    position: relative;
    display: inline-block;
    overflow: hidden;
  }

  .circle-text{
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 42rpx;
  }

  .circle-canvas{
    width: 152px;
    height: 152px;
  }

  .filter-buttons{
    width: 200rpx;
    .flex-v-center();
  }

  .button-group-item {
    background-color: #dae3f3;
    color: #fff;
    border: 0;
  }

  .list-item {
    /*border: 0;
    border-radius: 6rpx;*/
    margin-bottom: 0;
    border-top: 0;

    &:last-child {
      border-bottom: 0;
    }
  }

  .list-item-bd {
    justify-content: space-between;
  }

  .camera-btn {
    margin-top: 120rpx;
    margin-left: 60rpx;
    margin-right: 60rpx;
  }

</style>
<template>
  <view class="index-main">
    <view class="top-main">
      <view class="circle-pie-wrap">
        <view class="circle-pie">
          <canvas class="circle-canvas" canvas-id="percentage-pie"></canvas>
          <text class="circle-text">{{formula}}</text>
        </view>
      </view>
      <view class="filter-buttons">
        <buttongroup :items="buttongroupitems" size="normal" @tap.user="buttonitemTap"></buttongroup>
      </view>
    </view>

    <view class="index-entrace">
      <repeat for="{{listgroup}}">
        <listitem :icon="item.icon" :iconSize="item.iconSize" :hasArrow="item.hasArrow" @tap.user="listitemTap">
          <text>{{item.text}}</text>
          <text>{{item.subtext}}</text>
        </listitem>
      </repeat>
    </view>

    <camerabutton icon="camera.svg" size="large" className="camera-btn" @tap.user="startCamera">{{isDoctor ? '拍照/上传' : '拍照'}}</camerabutton>
  </view>

  <modal title="提示">
    <view class="flex v-center">
      <text>医院：</text>
      <picker :items="pickerItems" @pickerchange.user="pickerChange"></picker>
    </view>
    <view class="modal-footer" slot="footer">
      <cancelButton type="plain" @tap.user="hideModal">取消</cancelButton>
      <confirmButton @tap.user="modalConfirm">确定</confirmButton>
    </view>
  </modal>

  <tabbar :tabBar="tabBar" disabled="true" @tabbarChange.user="tabbarChange"></tabbar>
</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import Button from '../../components/button'
  import Buttongroup from '../../components/buttongroup'
  import Listitem from '../../components/listitem'
  import Modal from '../../components/modal'
  import Picker from '../../components/picker'
  import Tabbar from '../../components/tabbar'
  import PercentageCircle from '../../components/percentagecircle/'
  import {showError, showToast} from '../../utils/util'
  import {uploadFile} from '../../utils/wechat'
  import {session} from '../../service/auth'

  const PICKER_ITEMS = [
    {
      value: '',
      name: '请选择'
    },
    {
      value: '上海瑞金第一人民医院',
      name: '上海瑞金第一人民医院'
    },
    {
      value: '-',
      name: '其它'
    }
  ]

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '二维码照片上报销量',
      enablePullDownRefresh: true
    }

    components = {
      modal: Modal,
      picker: Picker,
      cancelButton: Button,
      confirmButton: Button,
      camerabutton: Button,
      buttongroup: Buttongroup,
      listitem: Listitem,
      tabbar: Tabbar
    }

    day = 1

    data = {
      totalNum: 0,
      successNum: 0,
      isDoctor: false,
      pickerItems: PICKER_ITEMS,
      selectedHospital: null,
      buttongroupitems: ['当天上传', '本月上传', '全部上传'],
      listgroup: [
        {
          icon: 'scaning.png',
          iconSize: 'small',
          text: '识别中',
          subtext: '0',
          flag: 'scaning',
          hasArrow: true
        },
        {
          icon: 'unkown.png',
          iconSize: 'small',
          text: '无法识别',
          subtext: '0',
          flag: 'scanFail',
          hasArrow: true
        },
        {
          icon: 'lookover.svg',
          iconSize: 'small',
          text: '待审核',
          subtext: '0',
          flag: 'checking',
          hasArrow: true
        },
        {
          icon: 'refuse.png',
          iconSize: 'small',
          text: '审核未通过',
          subtext: '0',
          flag: 'checkFail',
          hasArrow: true
        }
      ],
      tabBar: {
        color: '#777',
        selectedColor: '#01458e',
        borderStyle: '#ddd',
        backgroundColor: '#fff',
        list: [
          {
            text: '统计',
            icon: 'stats.png',
            selectedIcon: 'stats-selected.png'
          },
          {
            text: '列表',
            icon: 'list.svg',
            selectedIcon: 'list-selected.png'
          }
        ]
      }
    }

    computed = {
      formula () {
        return this.successNum + '/' + this.totalNum
      }
    }

    watch = {
      formula () {
        this.circle.percent = (this.successNum / this.totalNum) || 0
      }
    }

    methods = {
      buttonitemTap (index) {
        if(index === 0) {
          this.day = 1
          this.queryCount(1)
        }
        else if(index === 1) {
          this.day = 30
          this.queryCount(30)
        }
        else if(index === 2) {
          this.day = 0
          this.queryCount(0)
        }
      },
      listitemTap (index, e) {
        this.$navigate('/pages/qrcodelist/qrcodelist', {status: this.listgroup[index].flag})
      },
      tabbarChange (index) {
        if (index === 1) {
          this.$navigate('/pages/qrcodelist/qrcodelist')
        }
      },
      startCamera () {
        if (this.isDoctor) {
          this.showModal()
        } else {
          this.launchCamera()
        }
      },
      hideModal () {
        this.closeModal()
      },
      modalConfirm () {
        if (!this.selectedHospital) {
          showError('请先选择一个医院')
        } else {
          this.closeModal()
          this.launchCamera()
        }
      },
      pickerChange (item) {
        this.selectedHospital = item.value
      }
    }
    showModal () {
      this.$invoke('modal', 'open')
    }
    closeModal () {
      this.$invoke('modal', 'close')
    }
    fillCount (data) {
      let datas = data.qrImgCount

      this.listgroup.forEach(group => {
        const item = datas.find(e => e.status === group.flag)
        if (item) {
          group.subtext = item.total
        } else {
          group.subtext = 0
        }
      })

      this.totalNum = 0
      datas.forEach(e => this.totalNum += Number(e.total))
      this.successNum = (datas.find(item => item.status === 'checkPass') || {}).total || 0
      this.$apply()
    }
    queryCount(day = 0) {
      let params = {day}
      return new Promise((resolve, reject) => {
        fetch.get('count/qrimage', params).then(res => {
          if (res.success) {
            resolve(res.data)
            this.fillCount(res.data)
          } else {
            reject(res.message)
            showError(res.message)
          }
        }, errMsg => {
          reject(errMsg)
          showError(errMsg)
        })
      })
    }

    refresh () {
      this.queryCount(this.day)
    }

    launchCamera(){
      wx.chooseImage({
        count: 9, // 默认9
        sizeType: ['compressed'], // 可以指定是原图还是压缩图，默认二者都有
        sourceType: ['album', 'camera'], // 可以指定来源是相册还是相机，默认二者都有
        success: (res) => {
          // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
          this.uploadQrImages(res.tempFilePaths).then(this.launchCamera.bind(this))
        },
        fail: () => {
          console.info('取消拍照')
        }
      })
    }

    uploadQrImages(filePaths) {
      let len = filePaths.length
      let uploadCount = 0
      let errorCount = 0

      return new Promise((resolve, reject) => {
        filePaths.forEach(path => {
          uploadFile('upload/qrimage', path)
            .catch(e => {
              errorCount++
            })
            .finally(e => {
              if (++uploadCount === len) {
                this.refresh()
                if (errorCount > 0) {
                  wx.showModal({
                    title: '提示',
                    content: `上传完成, ${errorCount}张上传失败`,
                    showCancel: false,
                    success: resolve
                  })
                } else {
                  setTimeout(e => {
                    showToast('上传成功').then(resolve)
                  }, 300)
                }
              }
            })
        })
      })
    }

    onShow () {
      this.queryCount(this.day)
    }

    onLoad () {
      this.day = 1
      this.isDoctor = session.get().user.role === 5
      this.circle = new PercentageCircle('percentage-pie', {percent: 0, radius: 70, borderWidth: 12})
      if (this.isDoctor) {
        wx.setNavigationBarTitle({
          title: '产品信息收集'
        })
      }
    }

    onPullDownRefresh () {
      this.queryCount(this.day)
    }
  }
</script>
