<style lang="less">
  @import "../../less/mixin";

  .message-list {
    .list-item {
      margin-bottom: 0;
      margin-top: -2rpx;
    }
  }

  .list-item-text {
    padding-top: 3px;
    padding-bottom: 3px;
  }

  .list-item-badge {
    display: inline-block;
    width: 12rpx;
    height: 12rpx;
    background-color: #ff0000;
    border-radius: 50%;
    vertical-align: text-top;
    margin-left: 6rpx;
  }
</style>
<template>
  <view class="message-list">
    <repeat key="index" for="{{dataList}}">
      <ListItem hasArrow="true" @tap.user="listItemTap">
        <view class="list-item-text">
          <text>{{item.title}}</text>
          <text class="list-item-badge" wx:if="{{item.status==='unread'}}"></text>
        </view>
      </ListItem>
    </repeat>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import ListItem from '../../components/listitem'
  import { showError } from '../../utils/util'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '消息管理'
    }

    components = {
      ListItem: ListItem
    }

    data = {
      dataList: []
    }

    methods = {
      listItemTap (index) {
        const item = this.dataList[index]
        const detail = JSON.stringify(Object.assign(item.detail, {id: item.id, itemIndex: index, date: item.date}))
        this.$navigate('/pages/message/detail', { detail })
      }
    }

    updateMessage(index) {
      this.dataList[index].status = 'read'
      this.$apply()
    }

    handleQuery () {
      this.page = 1
      this.dataList = []
      this.queryMessages(this.page)
    }

    appendQuery () {
      if (!this.loaded) return
      this.queryMessages(++this.page)
    }

    queryMessages(page) {
      let params = {
        page: page,
        limit: 20
      }
      this.loaded = false
      return new Promise((resolve, reject) => {
        fetch.get('query/news', params).then(res => {
          if (res.success) {
            this.dataList = this.dataList.concat(res.data.docs)
            resolve(res.data)
            this.$apply()
          } else {
            reject(res.message)
            showError(res.message)
          }
        }, errMsg => {
          reject(errMsg)
          showError(errMsg)
        }).finally(res => {
          this.loaded = true
        })
      })
    }

    onReachBottom () {
      this.appendQuery()
    }

    getPrevPage () {
      const pages = this.getCurrentPages()
      return pages[pages.length - 2]
    }

    onLoad () {
      this.page = 1
      this.loaded = false
      this.queryMessages(this.page)
      const resetPrePage = this.getPrevPage().reset
      if (resetPrePage) {
        resetPrePage()
      }
    }
  }
</script>
