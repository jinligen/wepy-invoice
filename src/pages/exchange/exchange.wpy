<style lang="less">
  @import "../../less/mixin";

  .top-message {
    .flex();
    padding: 20rpx;
    border: 4rpx solid #ddd;
    border-radius: 16rpx;
    background-color: #fff;
    margin: 20rpx;

    .icon {
      padding: 0;
      margin-right: 40rpx;
      margin-left: 20rpx;
    }

    .tmessage {
      flex: 1;
    }

    .tmsg-title {
      font-size: 32rpx;
    }
  }

  .exchange-listgroup {
    .flex();
    flex-direction: column;
    background-color: #fff;
    flex: 1;
    height: 100%;
    padding-bottom: 10rpx;
    box-sizing: border-box;
    overflow: hidden;
  }

  .exchange-list {
    flex: 1;
    height: 100%;
    box-sizing: border-box;
    padding-left: 20rpx;
    padding-right: 20rpx;
    overflow: hidden;
  }

  .exchange-legend {
    position: relative;
    text-align: center;
    margin-bottom: 20rpx;

    &:before {
      content: '';
      position: absolute;
      left: 0;
      right: 0;
      top: 50%;
      margin-top: -2rpx;
      border-top: 4rpx solid #666;
    }

    > text {
      position: relative;
      display: inline-block;
      padding: 16rpx 20rpx;
      background-color: #fff;
      color: @gcolor;
      font-size: 36rpx;
      font-weight: bold;
    }
  }

  .page-actions {
    padding: 20rpx 40rpx;
    background-color: #fff;
    border-top: 2rpx solid #ccc;
    .flex-v-center();
    justify-content: space-between;
  }

  .cur-piont-label {
    color: @gcolor;
    margin-right: 40rpx;
  }

</style>
<template>
  <view class="top-message">
    <gifticon name="gift.svg" size="large"></gifticon>
    <view class="tmessage">
      <view class="tmsg-title">积分兑换详情</view>
      <view class="tmsg-bd">1、活动日期：<text wx:if="{{expireDate}}">当前至{{expireDate}}</text></view>
    </view>
  </view>

  <view class="exchange-listgroup">
    <view class="exchange-legend">
      <text>积分兑换区</text>
    </view>
    <scroll-view scroll-y="true" class="exchange-list">
      <block wx:for="{{dataList}}" wx:key="index">
        <view class="card-item">
          <image class="card-cover" src="{{item.realUrl}}" mode="aspectFit"></image>
          <view class="card-body">
            <view class="card-desc">
               {{item.describe}} {{item.score}}积分
            </view>
            <view class="counter">
              <view class="counter-action" data-index="{{index}}" @tap="minus">
                <minusicon name="minus.svg" size="small"></minusicon>
              </view>
              <input type="number" class="count" data-index="{{index}}" value="{{item.num}}" @input="numChange" @blur="numBlur" />
              <view class="counter-action" data-index="{{index}}" @tap="plus">
                <plusicon name="plus.svg" size="small"></plusicon>
              </view>
            </view>
          </view>
        </view>
      </block>
    </scroll-view>
  </view>

  <view class="page-actions">
    <view class="cur-point-msg">
      <text class="cur-piont-label">当前积分</text>
      <text class="cur-piont-val">{{userPoint}}</text>
    </view>
    <excbutton @tap.user="exchangeTap">确认兑换</excbutton>
  </view>

</template>

<script>
  import wepy from 'wepy'
  import fetch, {serverUrl} from '../../service/fetch'
  import Icon from '../../components/icon'
  import Button from '../../components/button'
  import Carditem from '../../components/carditem'
  import Counter from '../../components/counter'
  import {showError, showToast, formatDate} from '../../utils/util'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '我的积分'
    }

    components = {
      gifticon: Icon,
      plusicon: Icon,
      minusicon: Icon,
      carditem: Carditem,
      excbutton: Button,
      counter: Counter
    }

    data = {
      expireDate: '',
      userPoint: 0,
      dataList: []
    }

    computed = {
      expireDate () {
        if (this.dataList.length === 0) {
          return ''
        } else {
          return formatDate(new Date(this.dataList[0].expiredate), 'yyyy年MM月dd日')
        }
      }
    }

    methods = {
      plus (e) {
        let index = e.currentTarget.dataset.index
        this.dataList[index].num++
      },
      minus (e) {
        let index = e.currentTarget.dataset.index
        this.dataList[index].num = Math.max(0, this.dataList[index].num - 1)
      },
      numChange (e) {
        let index = e.currentTarget.dataset.index
        let value = e.detail.value
        if (isNaN(value)) {
          value = 0
        }
        this.dataList[index].num = parseInt(value)
        this.setData({
          dataList: this.dataList
        })
      },
      numBlur (e) {
        let index = e.currentTarget.dataset.index
        let value = parseInt(e.detail.value)
        if (isNaN(value)) {
          value = 0
        }
        this.dataList[index].num = value
        this.setData({
          dataList: this.dataList
        })
      },
      exchangeTap () {
        this.doExchange()
      }
    }

    queryUserPoint () {
      fetch.get('find/score').then(res => {
        if (res.success) {
          if (res.data) {
            this.userPoint = res.data.userableScore
            this.$apply()
          }
        } else {
          showError(res.message)
        }
      }, showError)
    }

    queryExchanges () {
      fetch.get('find/scoregoods', {page: this.page++}).then(res => {
        if (res.success) {
          res.data.forEach(e => {
            e.realUrl = serverUrl + e.url
            e.num = 0
          })
          this.dataList = res.data
          this.$apply()
        } else {
          showError(res.message)
        }
      }, showError)
    }

    calcToExchangeScore (ids) {
      let toExchangeScore = 0
      ids.forEach(e => {
        let curItem = this.dataList.find(item => item.id === e.id)
        if (curItem) {
          toExchangeScore += parseFloat(curItem.score) * e.num
        }
      })

      return toExchangeScore
    }

    flatIds (ids) {
      let newIds = []
      ids.forEach(e => {
        if (e.num === 0) {
          newIds.push(e.id)
        } else {
          for (let i = 0; i < e.num; i++) {
            newIds.push(e.id)
          }
        }
      })

      return newIds
    }

    doExchange () {
      let ids = this.dataList.filter(e => e.num > 0).map(e => {return {num: e.num, id: e.id}})
      if (ids.length === 0) return showError('请选择要兑换的项')
      //if (this.calcToExchangeScore(ids) > this.userPoint) return showError('您当前积分不足，请调整')
      let params = {
        goods: this.flatIds(ids)
      }
      fetch.post('exchange', params).then(res => {
        if (res.success) {
          showToast(res.message)
          this.refersh()
        } else {
          showError(res.message)
        }
      }, showError)
    }

    refersh () {
      this.queryUserPoint()
      this.queryExchanges()
    }

    onLoad () {
      this.refersh()
    }
  }
</script>
