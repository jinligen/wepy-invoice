<style lang="less">
  @import "../../less/mixin";

  page {
    background-color: #fff;
  }

  .imgView-container {
    .flex-center();
    height: 420rpx;
    margin: 10rpx;
    border-radius: 16rpx;
    overflow: hidden;

    .inv-image{
      width: 100%;

      &.portrait{
        transform: rotate(-90deg);
      }
    }

  }

  .detail-list {
    padding-top: 40rpx;
    border-top: 2rpx solid #ddd;
  }

  .detail-item {
    .flex-v-center();
    justify-content: space-between;
    padding: 16rpx 30rpx;
    border-bottom: 2rpx solid #eee;
  }

  .r {
    color: #cc0000;
  }

  .detail-actions {
    .flex();
    justify-content: space-around;
    margin-top: 60rpx;

    .button {
      width: 20%;
    }
  }

  .detail-value {
    .form-item {
      margin-bottom: 0;
    }
    input {
      text-align: right;
      padding-left: 0 !important;
      padding-right: 0 !important;
    }
  }

  .repai {
    display: inline-block;
    font-size: 36rpx;
    padding: 10rpx;

    &.disabled {
      color: #999;
      pointer-events: none;
    }
  }

</style>
<template>
  <view class="imgView-container">
    <image class="inv-image {{isPortrait ? 'portrait': ''}}" src="{{filePath}}"
           mode="aspectFit"
           style="height:{{imgHeight}}px"
           bindtap="thumbTap"
    >
    </image>
  </view>
  <view class="detail-list">
    <view class="detail-item">
      <view class="detail-label">
        <text>状态：</text>
        <text class="r">{{statusText}}</text>
      </view>
      <text class="detail-value r repai {{canReCaptrue ? '' : 'disabled'}}" @tap="startCamera">重拍</text>
    </view>
    <view class="detail-item">
      <text class="detail-label">状态说明</text>
      <view class="detail-value">
        <statusinput :value.sync="remark" disabled="true"></statusinput>
      </view>
    </view>
    <view class="detail-item">
      <text class="detail-label">二维码</text>
      <view class="detail-value">
        <qrinput :value.sync="qrcode" @change.user="qrcodeChange"></qrinput>
      </view>
    </view>
    <view class="detail-item">
      <text class="detail-label">型号</text>
      <view class="detail-value">
        <typeinput :value.sync="lot" @change.user="lotChange"></typeinput>
      </view>
    </view>
    <view class="detail-item">
      <text class="detail-label">批号</text>
      <view class="detail-value">
        <numinput :value.sync="upn" @change.user="upnChange"></numinput>
      </view>
    </view>
  </view>
  <view class="detail-actions">
    <delbutton type="danger" :disabled.sync="pageDisabled" @tap.user="delTap">删除</delbutton>
    <savebutton @tap.user="updateTap" :disabled.sync="saveDisabled">保存</savebutton>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import fetch, {serverUrl} from '../../service/fetch'
  import Button from '../../components/button'
  import Formitem from '../../components/formitem'
  import {uploadFile} from '../../utils/wechat'
  import {showError, showToast, confirm} from '../../utils/util'

  const STATUS_MAP = {
    checking: '待审核',
    checkFail: '审核未通过',
    checkPass: '审核通过',
    scaning: '识别中',
    scanFail: '无法识别'
  }

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '二维码照片上报销量'
    }
    components = {
      delbutton: Button,
      savebutton: Button,
      statusinput: Formitem,
      qrinput: Formitem,
      typeinput: Formitem,
      numinput: Formitem
    }
    imageFile = null
    data = {
      filePath: '',
      qrcode: '',
      status: '',
      qrimageId: '',
      remark: '',
      statusText: '',
      date: '',
      scanId: '',
      lot: '',
      upn: '',
      imgHeight: wx.getSystemInfoSync().windowWidth,
      isPortrait: false
    }
    computed = {
      saveDisabled () {
        return this.status !== 'scanFail'
      },
      pageDisabled () {
        return this.status === 'checkPass'
      },
      canReCaptrue () {
        return this.status === 'scanFail' || this.status === 'checkFail'
      }
    }
    methods = {
      thumbTap() {
        wx.previewImage({
          urls:[this.filePath]
        })
      },
      delTap (e) {
        confirm('确定要删除吗?').then(() => {
          this.deleteImage(this.qrimageId)
        })
      },
      updateTap () {
        this.updateImage()
      },
      qrcodeChange (e) {
        this.qrcode = e.detail.value
      },
      upnChange (e) {
        this.upn = e.detail.value
      },
      lotChange (e) {
        this.lot = e.detail.value
      },
      startCamera () {
        this.launchCamera()
      }
    }
    launchCamera(){
      wx.chooseImage({
        count: 1, // 默认9
        sizeType: ['compressed'], // 可以指定是原图还是压缩图，默认二者都有
        sourceType: ['camera'], // 可以指定来源是相册还是相机，默认二者都有
        success: (res) => {
          // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片
          let imgFilePath = res.tempFilePaths[0]
          this.imageFile = imgFilePath
          this.filePath = imgFilePath
          this.$apply()
        },
        fail: () => {
          //showError("拍照调用失败");
        }
      })
    }
    queryImage(qrimageId) {
      fetch.get(`find/qrimage/${qrimageId}`).then(res => {
        if (res.success) {
          this.setParams(res.data)
        } else {
          showError(res.message)
        }
      }, showError)
    }
    updateImage() {
      let params = {
        qrcode: this.qrcode,
        upn: this.upn,
        lot: this.lot,
        qrimageId: this.qrimageId
      }
      if (this.imageFile) {
        return uploadFile('update/qrimage', this.imageFile, params).then(data => {
          if (data.success) {
            this.imageFile = null
            this.queryImage(this.qrimageId)
            showToast(data.message)
          } else {
            showError(data.message)
          }
        }, showError)
      } else {
        return fetch.post('update/qrimage', {file: '', ...params}).then(data => {
          if (data.success) {
            this.queryImage(this.qrimageId)
            showToast(data.message)
          } else {
            showError(data.message)
          }
        }, showError)
      }
    }
    deleteImage (qrimageId) {
      fetch.get(`remove/qrimage/${qrimageId}`).then(res => {
        if (res.success) {
          showToast(res.message, 1000)
          setTimeout(() => {
            this.getPrevPage().handleQuery()
            this.$back()
          }, 1000)
        } else {
          showError(res.message)
        }
      }, showError)
    }
    getPrevPage () {
      const pages = this.getCurrentPages()
      return pages[pages.length - 2]
    }
    setParams (params = {}) {
      this.qrcode = params.qrcode || ''
      this.date = params.date
      this.scanId = params.scanId
      this.filePath = serverUrl + params.filePath
      this.qrimageId = params.id
      this.remark = params.remark
      this.status = params.status
      this.statusText = STATUS_MAP[params.status]
      this.lot = params.lot || ''
      this.upn = params.upn || ''
      this.$apply()
    }
    onLoad (params) {
      this.qrimageId = params.qrimageId
      this.queryImage(this.qrimageId)
    }
  }
</script>
