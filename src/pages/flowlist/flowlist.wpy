<style lang="less">
  @import "../../less/mixin";

  .query-form-wrap {
    padding: 30rpx;
    margin: 10rpx;
    border-radius: 8rpx;
    .flex-v-center();
    background-color: #fff;

    .button {
      margin-left: 20rpx;
    }
  }

  .query-label {
    width: 80rpx;
    text-align: center;
  }

  .table-row {
    &:active {
      background-color: #f2f2f2;
    }
  }

  .table-cell {
    word-break: break-all;
    word-wrap: break-word;
    white-space:normal;
    padding-left: 4rpx;
    padding-right: 4rpx;
    &.opt {
      flex: none;
      width: 80rpx;
    }

    &.date {
      flex: none;
      width: 200rpx;
    }

    .icon {
      padding: 0;
    }
  }

</style>
<template>
  <view class="query-form-wrap">
    <veiw class="query-label">时间</veiw>
    <datetimepicker :value.sync="date" @datetimechange.user="datetimeChange"></datetimepicker>
    <querybutton @tap.user="queryTap">查询</querybutton>
    <querybutton @tap.user="exportTap" wx:if="{{showExport}}">导出</querybutton>
  </view>

  <view class="table">
    <view class="table-row table-header">
      <view class="table-cell th order">序号</view>
      <view class="table-cell th">二维码</view>
      <view class="table-cell th date">日期</view>
      <view class="table-cell th opt"></view>
    </view>

    <scroll-view scroll-y="true" class="table-body" lower-threshold="0" style="height:{{tableHeight}}px;" bindscrolltolower="onEndReached">
      <block wx:for="{{dataList}}" wx:key="index">
        <view class="table-row" @tap="rowTap({{item}})">
          <view class="table-cell td order">{{index + 1}}</view>
          <view class="table-cell td">{{item.historyqrcode}}</view>
          <view class="table-cell td date">{{item.dateString}}</view>
          <view class="table-cell td opt">
            <view class="icon-delete" @tap.stop="delTap({{item}})">
              <deleteIcon name="delete.svg"></deleteIcon>
            </view>
          </view>
        </view>
      </block>
    </scroll-view>

  </view>

  <tabbar :tabBar="tabBar" disabled="true" tabIndex="1" @tabbarChange.user="tabbarChange"></tabbar>

</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import Button from '../../components/button'
  import Icon from '../../components/icon'
  import Datetimepicker from '../../components/datetimepicker'
  import Tabbar from '../../components/tabbar'
  import {showError, showToast, confirm, formatDate} from '../../utils/util'
  import {session} from '../../service/auth'

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '二维码流向查询'
    }

    components = {
      deleteIcon: Icon,
      tabbar: Tabbar,
      datetimepicker: Datetimepicker,
      querybutton: Button
    }

    page = 1
    loaded = false

    data = {
      date: formatDate(new Date, 'yyyy-MM-dd'),
      dataList: [],
      total: 0,
      showExport: session.get().user.role === 3,
      tableHeight: wx.getSystemInfoSync().windowHeight - 180,
      tabBar: {
        color: '#777',
        selectedColor: '#01458e',
        borderStyle: '#ddd',
        backgroundColor: '#fff',
        list: [
          {
            text: '查询',
            icon: 'query.svg',
            selectedIcon: 'query-selected.svg'
          },
          {
            text: '列表',
            icon: 'list.svg',
            selectedIcon: 'list-selected.png'
          }
        ]
      }
    }

    computed = {

    }

    methods = {
      queryTap () {
        this.handleQuery()
      },
      exportTap () {
        console.log('export')
      },
      tabbarChange (index) {
        if (index === 0) {
          this.$back()
        }
      },
      rowTap (e) {
        let item = e.currentTarget.dataset.wepyParamsA
        this.getPrevPage().queryFlows(item.historyqrcode)
        this.$back()
      },
      delTap (e) {
        let item = e.currentTarget.dataset.wepyParamsA
        confirm('确定要删除吗?').then(() => {
          this.deleteFlow(item.id)
        })
      },
      datetimeChange (e) {
        this.date = e.detail.value
      }
    }

    handleQuery () {
      this.page = 1
      this.dataList = []
      this.queryFlowHistory(this.date, this.page)
    }

    appendQuery () {
      if (!this.loaded) return
      this.queryFlowHistory(this.date, ++this.page)
    }

    queryFlowHistory(date, page) {
      let params = {
        date: date,
        page: page,
        limit: 20
      }
      this.loaded = false
      return new Promise((resolve, reject) => {
        fetch.get('find/history', params).then(res => {
          if (res.success) {
            this.total = res.data.total
            res.data.docs.forEach(item => {
              item.dateString = formatDate(new Date(item.date), 'yyyy-MM-dd')
              this.dataList.push(item)
            })
            resolve(res.data)
            this.$apply()
          } else {
            reject(res.message)
            showError(res.message)
          }
        }, errMsg => {
          reject(errMsg)
          showError(errMsg)
        }).finally(res => {
          this.loaded = true
        })
      })
    }

    deleteFlow (historyId) {
      fetch.get(`remove/history/${historyId}`).then(res => {
        if (res.success) {
          showToast(res.message)
          this.handleQuery()
        } else {
          showError(res.message)
        }
      }, showError)
    }

    getPrevPage () {
      const pages = this.getCurrentPages()
      return pages[pages.length - 2]
    }

    onEndReached () {
      this.appendQuery()
    }

    onLoad () {
      this.handleQuery()
    }
  }
</script>
