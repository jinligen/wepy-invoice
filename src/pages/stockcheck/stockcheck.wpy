<style lang="less">
  @import "../../less/mixin";

  page {
    padding-top: 80 rpx;
  }

  .stock-create-btn {
    position: fixed;
    right: 40 rpx;
    bottom: 40 rpx;
    background-color: #10458e;
    width: 120 rpx;
    height: 120 rpx;
    border-radius: 50%;
    .flex-center();

    &:active {
      background-color: darken(#10458e, 5%);
    }
  }

  .stock-check-empty {
    position: absolute;
    left: 50%;
    top: 20%;
    -webkit-transform: translateX(-50%);
    transform: translateX(-50%);
    text-align: center;
    opacity: .7;
  }

  .stock-new-icon .icon-img {
    width: 200 rpx !important;
    height: 200 rpx !important;
  }

  .stock-new-hint {
    font-size: 32 rpx;
    margin-top: 50 rpx;
    color: #7e7e7e;
    white-space: nowrap;
  }

  .stock-check-remark {
    textarea {
      width: 100%;
      height: 200 rpx;
      border: 2 rpx solid #aaa;
      padding: 10 rpx;
      box-sizing: border-box;
    }
  }

  .modal-footer {
    .flex();
    justify-content: center;
    padding-top: 30 rpx;
  }

  .update-button {
    .flex-center();
    padding-left: 40 rpx;
    padding-right: 40 rpx;
    border-radius: 8 rpx;
    flex-direction: row;
    color: #fff;
    background-color: @gcolor;
    height: @normal;

    &:active {
      background-color: darken(@gcolor, 10%);
    }

    &.cancel {
      color: #666;
      background-color: #e0e0e0;
      margin-right: 40 rpx;
      &:active {
        background-color: darken(#e5e5e5, 10%);
      }
    }

  }

  .stock-submit-confirm-text {
    width: 340 rpx;
    margin: 0 auto;
    padding-top: 20 rpx;
    padding-bottom: 20 rpx;
    text-align: center;
  }

  .scrollview {
    flex: 1;
    height: 100%;
    overflow: hidden;
    box-sizing: border-box;
    padding-left: 10 rpx;
    padding-right: 10 rpx;
    padding-bottom: 10 rpx;
  }

  .header-tabs {
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    background-color: #fff;
    .flex();
    z-index: 100;
  }

  .header-tab-item {
    flex: 1;
    text-align: center;

    > text {
      display: inline-block;
      padding: 20 rpx 16 rpx;
      border-bottom: 1px solid transparent;
    }

    &.selected {
      > text {
        color: @gcolor;
        border-bottom-color: @gcolor;
      }
    }
  }
</style>
<template>

  <view class="header-tabs">
    <view class="header-tab-item" :class="{selected: tabIndex == 0}" data-index="0" @tap="switchTabTap">
      <text>未完成</text>
    </view>
    <view class="header-tab-item" :class="{selected: tabIndex == 1}" data-index="1" @tap="switchTabTap">
      <text>已完成</text>
    </view>
  </view>

  <view class="stock-check-empty" wx:if="{{dataList.length===0&&loaded===true}}">
    <newStockIcon className="stock-new-icon" name="stock-new.svg"/>
    <view class="stock-new-hint">点击新建任务开始盘点吧！</view>
  </view>

  <scroll-view
    wx:if="{{dataList.length!==0}}"
    scroll-y="true"
    class="scrollview"
    lower-threshold="0"
    bindscrolltolower="onEndReached"
  >
    <repeat for="{{dataList}}" key="index">
      <stockChemItem
        :stock="item"
        @tap.user="onItemTap"
        @checkTap.user="onCheckTap"
        @submitTap.user="onSubmitTap"
        @historyTap.user="onHistoryTap"
      />
    </repeat>
  </scroll-view>

  <view class="stock-create-btn" @tap="createTap">
    <plusIcon name="plus_white.svg" size="large"/>
  </view>

  <modal wx:if="{{isModalShow}}" title="提示" @modalClose.user="closeModal">
    <view class="stock-check-remark">
      <textarea value="{{remark}}" @input="remarkChange" placeholder="请输入盘点备注(选填)"/>
    </view>
    <view class="modal-footer">
      <view class="update-button cancel" @tap="closeModal">取消</view>
      <view class="update-button" @tap="saveRemarkTap">确定</view>
    </view>
  </modal>

  <confirmModal wx:if="{{isConfirmModalShow}}" title="提示" @modalClose.user="closeConfirmModal">
    <view class="stock-submit-confirm-text">
      确定点击提交，结束本次盘点任务吗?
    </view>
    <view class="modal-footer">
      <view class="update-button cancel" @tap="closeConfirmModal">取消</view>
      <view class="update-button" @tap="saveStockTap">确定</view>
    </view>
  </confirmModal>

  <hintModal wx:if="{{isHintModalShow}}" title="提示" @modalClose.user="closeHintModal">
    <view class="stock-submit-confirm-text">
      请务必在每晚六点以后进行库存盘点任务
    </view>
    <view class="modal-footer">
      <view class="update-button" @tap="closeHintModal">知道了</view>
    </view>
  </hintModal>

  <genderModal wx:if="{{isGenderModalShow}}" title="提示" @modalClose.user="closeGenderModal">
    <view class="stock-submit-confirm-text">
      报告生成中，请在xxx工作日后参考报告
    </view>
    <view class="modal-footer">
      <view class="update-button" @tap="showSubmitTask">知道了</view>
    </view>
  </genderModal>

</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import Icon from '../../components/icon'
  import Modal from '../../components/modal'
  import StockChemItem from '../../components/stockcheckitem'
  import { showError, showToast, formatDate } from '../../utils/util'

  const STOCK_STATUS = {
    'submit': '已提交',
    'unSubmit': '未提交'
  }

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '库存盘点'
    }

    components = {
      plusIcon: Icon,
      newStockIcon: Icon,
      modal: Modal,
      confirmModal: Modal,
      hintModal: Modal,
      genderModal: Modal,
      stockChemItem: StockChemItem
    }

    loaded = false
    page = 1
    curIndex = 0

    data = {
      tabIndex: 0,
      queryType: 'unSubmit',
      dataList: [],
      remark: '',
      isModalShow: false,
      isConfirmModalShow: false,
      isHintModalShow: true,
      isGenderModalShow: false
    }

    computed = {}

    watch = {}

    methods = {
      closeModal () {
        this.hideModal()
      },
      closeConfirmModal () {
        this.hideConfirmModal()
      },
      closeHintModal () {
        this.hideHintModal()
      },
      closeGenderModal () {
        this.hideGenderModal()
      },
      remarkChange (e) {
        this.remark = e.detail.value
      },
      saveRemarkTap () {
        this.createTask()
      },
      switchTabTap (e) {
        let index = Number(e.currentTarget.dataset.index)
        this.switchTab(index)
      },
      createTap () {
        this.showModal()
      },
      onItemTap (index) {

      },
      onCheckTap (index) {
        this.curIndex = index
        let curItem = this.dataList[this.curIndex]
        if (curItem) {
          this.launchScaner(curItem.id)
        }
      },
      onSubmitTap (index) {
        this.curIndex = index
        this.showConfirmModal()
      },
      async saveStockTap () {
        let curItem = this.dataList[this.curIndex]
        if (curItem) {
          this.uploadTask(curItem.id)
        }
      },
      showSubmitTask () {
        this.hideGenderModal()
        this.switchTab(1)
      },
      onHistoryTap () {
        this.$navigate('/pages/stockcheck/stockchecklist')
      }
    }

    showModal () {
      this.isModalShow = true
      this.$apply()
    }

    hideModal () {
      this.isModalShow = false
      this.$apply()
    }

    showConfirmModal () {
      this.isConfirmModalShow = true
      this.$apply()
    }

    hideConfirmModal () {
      this.isConfirmModalShow = false
      this.$apply()
    }

    hideHintModal () {
      this.isHintModalShow = false
      this.$apply()
    }

    showGenderModal () {
      this.isGenderModalShow = true
      this.$apply()
    }

    hideGenderModal () {
      this.isGenderModalShow = false
      this.$apply()
    }

    formatData (item) {
      return {
        ...item,
        statusText: STOCK_STATUS[item.status] || '',
        createdAt: formatDate(new Date(item.createdAt), 'yyyy-MM-dd'),
        endDate: formatDate(new Date(item.endDate.replace(/-/g, '/')), 'yyyy-MM-dd')
      }
    }

    launchScaner (id) {
      wepy.scanCode()
        .then(res => {
          this.uploadTaskQr(id, res.result)
        })
        .catch(() => {
          console.log('scan canceled')
        })
    }

    switchTab (index) {
      this.tabIndex = index
      switch (index) {
        case 0:
          this.queryType = 'unSubmit'
          break
        case 1:
          this.queryType = 'submit'
          break
      }
      this.handleQuery()
    }

    async createTask () {
      let res = await fetch.get('create/Inventory', {remark: this.remark})
      if (res.success) {
        this.remark = ''
        this.hideModal()
        this.switchTab(0)
      } else {
        showError(res.message)
      }
    }

    async queryTasks (page, status, refresh = false) {
      this.loaded = false
      try {
        let res = await fetch.get('query/Inventory', {limit: 20, page, status})
        res = res.data.result.docs.map(item => this.formatData(item))
        if (refresh) {
          this.dataList = res
        } else {
          this.dataList = this.dataList.concat(res)
        }
        this.loaded = true
        this.$apply()
      } catch (e) {
        this.loaded = true
      }
    }

    async uploadTask (id) {
      this.hideConfirmModal()
      let res = await fetch.get('update/Inventory', {id})
      if (res.success) {
        this.showGenderModal()
      } else {
        showError(res.message)
      }
    }

    async uploadTaskQr (inventoryId, qrCode) {
      let res = await fetch.get('create/InventoryQr', {inventoryId, qrCode})
      if (res.success) {
        this.handleQuery()
        showToast(res.message)
      } else {
        showError(res.message)
      }
    }

    handleQuery () {
      this.page = 1
      this.queryTasks(this.page, this.queryType, true)
    }

    appendQuery () {
      if (!this.loaded) return
      this.queryTasks(++this.page, this.queryType)
    }

    onEndReached () {
      this.appendQuery()
    }

    onLoad () {
      this.page = 1
      this.loaded = false
      this.queryTasks(this.page, this.queryType)
    }
  }
</script>
