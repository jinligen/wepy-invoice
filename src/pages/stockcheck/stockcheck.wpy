<style lang="less">
  @import "../../less/mixin";

  page {
    padding-top: 80rpx;
  }

  .stock-create-btn {
    position: fixed;
    right: 40rpx;
    bottom: 40rpx;
    background-color: #10458e;
    width: 120rpx;
    height: 120rpx;
    border-radius: 50%;
    .flex-center();

    &:active {
      background-color: darken(#10458e, 5%);
    }
  }

  .stock-check-empty {
    position: absolute;
    left: 50%;
    top: 20%;
    -webkit-transform: translateX(-50%);
    transform: translateX(-50%);
    text-align: center;
    opacity: .7;
  }

  .stock-new-icon .icon-img {
    width: 200rpx !important;
    height: 200rpx !important;
  }

  .stock-new-hint {
    font-size: 32rpx;
    margin-top: 50rpx;
    color: #7e7e7e;
    white-space: nowrap;
  }

  .stock-tabs {
    .flex();
    margin-top: -20rpx;
    padding-bottom: 10rpx;


    > view {
      flex: 1;
      .flex-center();
      height: 60rpx;
      border-style: solid;
      border-width: 2rpx 2rpx 2rpx 0;
      border-color: #ddd;

      &:last-child {
        border-top-right-radius: 60rpx;
        border-bottom-right-radius: 60rpx;
      }

      &:first-child {
        border-left: 2rpx solid #ddd;
        border-top-left-radius: 60rpx;
        border-bottom-left-radius: 60rpx;
      }

      &.selected {
        color: #f0f0f0;
        background-color: lighten(@gcolor, 20%);
        border-color: lighten(@gcolor, 20%);
      }
    }
  }

  .stock-check-form {
    textarea {
      width: 100%;
      height: 120rpx;
      border: 2rpx solid #ddd;
      padding: 10rpx;
      box-sizing: border-box;
    }
  }

  .stock-check-label {
    margin-top: 10rpx;
    margin-bottom: 10rpx;
  }

  .modal-footer {
    .flex();
    justify-content: center;
    padding-top: 30rpx;
  }

  .update-button {
    .flex-center();
    padding-left: 40rpx;
    padding-right: 40rpx;
    border-radius: 8rpx;
    flex-direction: row;
    color: #fff;
    background-color: @gcolor;
    height: @normal;

    &:active {
      background-color: darken(@gcolor, 10%);
    }

    &.cancel {
      color: #666;
      background-color: #e0e0e0;
      margin-right: 40rpx;
      &:active {
        background-color: darken(#e5e5e5, 10%);
      }
    }

  }

  .stock-modal-inner {
    width: 350rpx;
    margin: 20rpx auto;
    text-align: center;
  }

  .stock-modal-hints view {
    padding-left: 1.2em;
    text-indent: -1.2em;
    margin-bottom: 10rpx;
  }

  .scrollview {
    flex: 1;
    height: 100%;
    overflow: hidden;
    box-sizing: border-box;
    padding: 10rpx;
  }

  .header-tabs {
    position: fixed;
    left: 0;
    right: 0;
    top: 0;
    background-color: #fff;
    .flex();
    z-index: 100;
  }

  .header-tab-item {
    flex: 1;
    text-align: center;

    > text {
      display: inline-block;
      padding: 20rpx 16rpx;
      border-bottom: 1px solid transparent;
    }

    &.selected {
      > text {
        color: @gcolor;
        border-bottom-color: @gcolor;
      }
    }
  }
</style>
<template>
  <view class="header-tabs">
    <view class="header-tab-item" :class="{selected: tabIndex === 0}" @tap="switchTabTap(0)">
      <text>预约中</text>
    </view>
    <view class="header-tab-item" :class="{selected: tabIndex === 1}" @tap="switchTabTap(1)">
      <text>进行中</text>
    </view>
    <view class="header-tab-item" :class="{selected: tabIndex === 2}" @tap="switchTabTap(2)">
      <text>已完成</text>
    </view>
  </view>

  <view class="stock-check-empty" wx:if="{{dataList.length===0&&loaded===true}}">
    <newStockIcon class="stock-new-icon" name="stock-new.svg"/>
    <view class="stock-new-hint">点击新建任务开始盘点吧！</view>
  </view>

  <scroll-view
    wx:if="{{dataList.length!==0}}"
    scroll-y="true"
    class="scrollview"
    lower-threshold="0"
    bindscrolltolower="onEndReached"
  >
    <repeat key="index" for="{{dataList}}">
      <stockChemItem
        :stock="item"
        @tap.user="onItemTap"
        @checkTap.user="onCheckTap"
        @submitTap.user="onSubmitTap"
        @buttonTap.user="onButtonTap"
        @stockDetailTap.user="onStockDetailTap"
        @delTap.user="onDelTap"
      />
    </repeat>
  </scroll-view>

  <view class="stock-create-btn" @tap="createTap">
    <plusIcon name="plus_white.svg" size="large"/>
  </view>

  <modal :show.sync="isModalShow" title="提示">
    <view class="stock-tabs">
      <view class="{{createType === 1 ? 'selected' : ''}}" @tap="changeCreateType(1)">立即盘点</view>
      <view class="{{createType === 0 ? 'selected' : ''}}" @tap="changeCreateType(0)">预约盘点</view>
    </view>
    <view class="stock-check-form">
      <block wx:if="{{createType === 0}}">
        <view class="stock-check-label">盘点开始时间：</view>
        <datetimepickerStart :value.sync="stockStartTime" @change.user="stockStartChange"></datetimepickerStart>
        <view class="stock-check-label">盘点结束时间：</view>
        <datetimepickerEnd :value.sync="stockEndTime" @change.user="stockEndChange"></datetimepickerEnd>
      </block>
      <view class="stock-check-label">任务名称：</view>
      <textarea value="{{remark}}" @input="remarkChange" placeholder="请输入盘点任务名称(必填)"/>
      <view class="stock-check-label">盘点仓库：</view>
      <storepicker :items.sync="warehouseTypes" @change.user="storeChange"></storepicker>
      <view style="margin-top:6rpx;color:#888;font-size:24rpx;">提示：缺省仓库即主仓库，普通仓库即医院库</view>
      <view class="stock-check-label">产品线：</view>
      <divisionpicker :items.sync="divisions" @change.user="divisionChange"></divisionpicker>
      <view class="stock-check-label">报告生成时间：</view>
      <reportpicker :value.sync="reportValue" :items.sync="reportTimes" @change.user="reportChange"></reportpicker>
    </view>
    <view class="modal-footer">
      <view class="update-button cancel" @tap="closeModal">取消</view>
      <view class="update-button" @tap="startCreate">确定</view>
    </view>
  </modal>

  <confirmModal :show.sync="isConfirmModalShow" title="提示">
    <view class="stock-modal-inner">
      确定点击提交，结束本次盘点任务吗?
    </view>
    <view class="modal-footer">
      <view class="update-button cancel" @tap="closeConfirmModal">取消</view>
      <view class="update-button" @tap="saveStockTap">确定</view>
    </view>
  </confirmModal>

  <hintModal :show.sync="isHintModalShow" title="库存盘点须知">
    <view class="stock-modal-hints">
      <view>1. 目前创建盘点任务支持立即盘点和预约盘点两种创建方式；</view>
      <view>2. 创建盘点任务时可选择查看报告的时间：对比昨天库存（10分钟），对比今天库存（隔天）；</view>
      <view>3. 目前支持库存盘点的产品线为所有产品线，仓库类型为所有仓库。</view>
    </view>
    <view class="modal-footer">
      <view class="update-button" @tap="closeHintModal">知道了</view>
    </view>
  </hintModal>

  <genderModal :show.sync="isGenderModalShow" title="提示">
    <view class="stock-modal-hints">
      报告生成中，21:00点前提交盘点单据的，可在第二天上午查询盘点报告；21:00点后提交盘点单据的，可在第三天上午查询盘点报告；
    </view>
    <view class="modal-footer">
      <view class="update-button" @tap="showSubmitTask">知道了</view>
    </view>
  </genderModal>

  <toast />
</template>

<script>
  import wepy from 'wepy'
  import fetch from '../../service/fetch'
  import Icon from '../../components/icon'
  import Modal from '../../components/modal'
  import Picker from '../../components/picker'
  import DatetimePicker from '../../components/datetimepicker'
  import StockChemItem from '../../components/stockcheckitem'
  import Toast from 'wepy-com-toast'
  import { showError, showToast, confirm, formatDate } from '../../utils/util'

  const STOCK_STATUS = {
    'submit': '已提交',
    'start': '进行中',
    'unStart': '预约中',
    'expired': '过期未完成'
  }

  const formatData = item => {
    return {
      ...item,
      statusText: STOCK_STATUS[item.status] || '',
      createdAt: formatDate(new Date(item.createdAt), 'yyyy-MM-dd'),
      endDate: formatDate(new Date(item.endDate.replace(/-/g, '/')), 'yyyy-MM-dd')
    }
  }

  export default class Index extends wepy.page {
    config = {
      navigationBarTitleText: '库存盘点'
    }

    components = {
      plusIcon: Icon,
      newStockIcon: Icon,
      modal: Modal,
      confirmModal: Modal,
      hintModal: Modal,
      genderModal: Modal,
      storepicker: Picker,
      divisionpicker: Picker,
      reportpicker: Picker,
      datetimepickerStart: DatetimePicker,
      datetimepickerEnd: DatetimePicker,
      stockChemItem: StockChemItem,
      toast: Toast

    }

    data = {
      loaded: false,
      tabIndex: 0,
      createType: 1,
      reportType: 'now',
      queryType: 'unStart',
      stockStartTime: '',
      stockEndTime: '',
      dataList: [],
      divisions: [],
      warehouseTypes: [],
      reportValue: 0,
      reportTimes: [
        {name: '对比昨天库存（10分钟）', value: 'now'},
        {name: '对比今天库存（隔天）', value: 'night'}
      ],
      remark: '',
      isModalShow: false,
      isConfirmModalShow: false,
      isHintModalShow: true,
      isGenderModalShow: false
    }

    computed = {}

    watch = {}

    methods = {
      closeModal () {
        this.hideModal()
      },
      closeConfirmModal () {
        this.hideConfirmModal()
      },
      closeHintModal () {
        this.hideHintModal()
      },
      closeGenderModal () {
        this.hideGenderModal()
      },
      changeCreateType (type) {
        this.createType = +type
      },
      remarkChange (e) {
        this.remark = e.detail.value
      },
      startCreate () {
        this.createTask()
      },
      switchTabTap (index) {
        this.switchTab(+index)
      },
      stockStartChange (e) {
        this.stockStartTime = e.detail.value
      },
      stockEndChange (e) {
        this.stockEndTime = e.detail.value
      },
      createTap () {
        if (!this.createErrMsg) {
          this.showModal()
        } else {
          showError(this.createErrMsg)
        }
      },
      onItemTap (index) {

      },
      onCheckTap (index) {
        this.curIndex = index
        let curItem = this.dataList[this.curIndex]
        if (curItem) {
          this.launchScaner(curItem.id)
        }
      },
      onSubmitTap (index) {
        this.curIndex = index
        this.showConfirmModal()
      },
      saveStockTap () {
        let curItem = this.dataList[this.curIndex]
        if (curItem) {
          this.uploadTask(curItem.id)
        }
      },
      showSubmitTask () {
        this.hideGenderModal()
      },
      divisionChange (item) {
        this.divisionID = item.value
        this.divisionName = item.name
      },
      reportChange (item, selectIndex) {
        this.reportType = item.value
        this.reportValue = selectIndex
      },
      storeChange (item, index) {
        this.warehouseType = item.value
        this.divisions = [this.divisionPool[index]]
      },
      onButtonTap (index) {
        if (this.dataList[index].status === 'submit') {
          this.showGenderModal()
        } else {
          const id = this.dataList[index].id
          this.$navigate('/pages/stockcheck/stockchecklist', {id})
        }
      },
      onStockDetailTap (index) {
        this.curIndex = index
        const inventoryId = this.dataList[index].id
        this.$navigate('/pages/stockcheck/stockdetail', {inventoryId, tabIndex: this.tabIndex})
      },
      onDelTap (index) {
        confirm('确定要删除吗?').then(() => {
          const inventoryId = this.dataList[index].id
          this.deleteTask(inventoryId)
        })
      }
    }

    toast (msg) {
      this.$invoke('toast', 'show', {
        title: msg
      })
    }

    showModal () {
      this.isModalShow = true
      this.$apply()
    }

    hideModal () {
      this.isModalShow = false
      this.$apply()
    }

    showConfirmModal () {
      this.isConfirmModalShow = true
      this.$apply()
    }

    hideConfirmModal () {
      this.isConfirmModalShow = false
      this.$apply()
    }

    hideHintModal () {
      this.isHintModalShow = false
      this.$apply()
    }

    showGenderModal () {
      this.isGenderModalShow = true
      this.$apply()
    }

    hideGenderModal () {
      this.isGenderModalShow = false
      this.$apply()
    }

    launchScaner (id) {
      wepy.scanCode()
        .then(res => {
          this.uploadTaskQr(id, res.result).then(() => {
            this.launchScaner(id)
          }).catch(() => {
            setTimeout(() => {
              this.launchScaner(id)
            }, 2000)
          })
        })
        .catch(() => {
          console.log('scan canceled')
        })
    }

    switchTab (index) {
      this.tabIndex = index
      switch (index) {
        case 0:
          this.queryType = 'unStart'
          break
        case 1:
          this.queryType = 'start'
          break
        case 2:
          this.queryType = 'submit'
          break
      }
      this.handleQuery()
    }

    async createTask () {
      if (this.createType === 0) {
        if (this.stockStartTime === '') {
          return showError('请输入预约盘点开始时间')
        }

        if (this.stockEndTime === '') {
          return showError('请输入预约盘点结束时间')
        }
      }

      if (!this.remark) {
        return showError('请输入盘点任务名称')
      }

      let params = {
        name: this.remark,
        divisionName: this.divisionName,
        divisionID: this.divisionID,
        stockType: this.warehouseType,
        type: '内部盘点',
        order: this.createType === 0,
        report: this.reportType,
        strDate: this.stockStartTime,
        endDate: this.stockEndTime
      }

      let res = await fetch.post('create/Inventory', params)

      if (res.success) {
        this.remark = ''
        this.stockStartTime = ''
        this.stockEndTime = ''
        this.reportValue = 0
        this.hideModal()
        this.switchTab(this.createType)
      } else {
        showError(res.message)
      }
    }

    async queryTasks (page, status, refresh = false) {
      this.loaded = false
      try {
        let res = await fetch.get('query/Inventory', {limit: 20, page, status})
        res = res.data.docs.map(item => formatData(item))
        if (refresh) {
          this.dataList = res
        } else {
          this.dataList = this.dataList.concat(res)
        }
        this.loaded = true
        this.$apply()
      } catch (e) {
        this.loaded = true
      }
    }

    async queryStockType () {
      let res = await fetch.get('query/stockType')
      if (res.success && res.data.length > 0) {
        this.divisionPool = res.data.map(item => ({name: item.NameCN, value: item.DivisionID}))
        this.warehouseTypes = res.data.map(item => ({name: item.WarehouseType, value: item.WarehouseType}))
        this.divisions = [this.divisionPool[0]]
        this.divisionID = this.divisions[0].value
        this.divisionName = this.divisions[0].name
        this.warehouseType = this.warehouseTypes[0].value
        this.$apply()
      } else {
        this.createErrMsg = res.message
      }
    }

    async uploadTask (id) {
      this.hideConfirmModal()
      let res = await fetch.get('update/Inventory', {id})
      if (res.success) {
        this.switchTab(1)
      } else {
        showError(res.message)
      }
    }

    uploadTaskQr (inventoryId, qrCode) {
      return new Promise((resolve, reject) => {
        fetch.get('create/InventoryQr', {inventoryId, qrCode}).then(res => {
          this.handleQuery()
          if (res.success) {
            showToast(res.message)
            resolve()
          } else {
            this.toast(res.message)
            reject(res.message)
          }
        })
      })
    }

    async deleteTask (inventoryId) {
      let res = await fetch.get('delete/Inventory', {inventoryId})
      if (res.success) {
        this.handleQuery()
        showToast(res.message)
      } else {
        showError(res.message)
      }
    }

    handleQuery () {
      this.page = 1
      this.queryTasks(this.page, this.queryType, true)
    }

    appendQuery () {
      if (!this.loaded) return
      this.queryTasks(++this.page, this.queryType)
    }

    onEndReached () {
      this.appendQuery()
    }

    onShow () {
      if (wx.getStorageSync('_STOCK_REFRESH')) {
        wx.removeStorageSync('_STOCK_REFRESH')
        this.handleQuery()
      }
    }

    onLoad () {
      this.page = 1
      this.curIndex = 0
      this.createErrMsg = null
      this.divisionName = ''
      this.divisionID = ''
      this.warehouseType = ''
      this.divisionPool = []
      this.queryStockType()
      this.handleQuery()
    }
  }
</script>
